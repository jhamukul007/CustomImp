
//using Linked List
public class Stack<T> {
	private Node<T> head;
	private int length=0;
	public void push(T data) {
		if(this.head==null) {
			Node<T> newNode=new Node(data);
			this.head=newNode;
			length++;
		}
		else {
			
		
		Node<T> newNode=new Node(data);
		newNode.next=head;
		head=newNode;
		length++;
		}
	}
	
	public T top() {
		if(this.head==null)
		{
			throw new StackExceptions("Stack underflow Exception");
		}
		return this.head.data;
	}
	
	public T pop() {
		if(this.head==null)
		{
			throw new StackExceptions("Stack underflow Exception");
		}
		T data=this.head.data;
		head=head.next;
		length--;
		return data;
	}
	
	public boolean isEmpty() {
		return (this.length==0);
	}
	
	public int size() {
		return this.length;
	}
}
class Node<T>{
	T data;
	Node<T> next;
	public Node(T data) {
		this.data=data;
		next=null;
	}
}
